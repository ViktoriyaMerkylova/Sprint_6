{"name": "Тест открытия ответов в FAQ", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: Browsing context has been discarded\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nNoSuchWindowError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:747:5\nassert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nassert.open@chrome://remote/content/shared/webdriver/Assert.sys.mjs:147:4\nGeckoDriver.prototype.findElement@chrome://remote/content/marionette/driver.sys.mjs:1723:15\ndespatch@chrome://remote/content/marionette/server.sys.mjs:318:40\nexecute@chrome://remote/content/marionette/server.sys.mjs:289:16\nonPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nonPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20", "trace": "self = <tests.test_dropdown_important_questions.TestHomePage object at 0x00000255D641CAF0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"30bd625b-983b-41e3-b88d-f1fc4aa29a18\")>\nbutton = ('id', 'accordion__heading-6'), answer = ('xpath', '//div[@id = \"accordion__panel-6\"]/p')\nexpected_text = 'Да, пока самокат не привезли. Штрафа не будет, объяснительной записки тоже не попросим. Все же свои.'\n\n    @allure.title('Тест открытия ответов в FAQ')\n    @allure.description('Клик по вопросам FAQ по очереди, открываются ответы на вопросы по очереди')\n    @pytest.mark.parametrize(\n        'button, answer, expected_text',\n        [\n            [ImportalQuestionLocators.first_question_button, ImportalQuestionLocators.first_answer_text,\n             Data.coast_ans],\n            [ImportalQuestionLocators.second_question_button, ImportalQuestionLocators.second_answer_text,\n             Data.share_ans],\n            [ImportalQuestionLocators.third_rent_question_button, ImportalQuestionLocators.third_rent_answer_text,\n             Data.time_rent_ans],\n            [ImportalQuestionLocators.fourth_rent_question_button, ImportalQuestionLocators.fourth_rent_answer_text,\n             Data.today_rent_ans],\n            [ImportalQuestionLocators.fifth_return_question_button, ImportalQuestionLocators.fifth_return_answer_text,\n             Data.extend_return_ans],\n            [ImportalQuestionLocators.sixth_question_button, ImportalQuestionLocators.sixth_answer_text,\n             Data.charge_ans],\n            [ImportalQuestionLocators.seventh_order_question_button, ImportalQuestionLocators.seventh_order_answer_text,\n             Data.cancel_order_ans],\n            [ImportalQuestionLocators.eighth_question_button, ImportalQuestionLocators.eighth_answer_text,\n             Data.mkad_ans]\n        ]\n    )\n    def test_faq_list_click_on_questions_check_answer(self, driver, button, answer, expected_text):\n        main_page = ImportantQuestionsPage(driver)\n>       main_page.click_question_button(button)\n\ntests\\test_dropdown_important_questions.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\important_questions_page.py:30: in click_question_button\n    self.scroll(button)\npages\\base_pages.py:23: in scroll\n    element = self.driver.find_element(*locator)\nC:\\Users\\Viktoriya\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\Viktoriya\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000255D6465B50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"Browsing context has been discarded\",\"stacktra...ionette/server.sys.mjs:263:9\\\\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: Browsing context has been discarded\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       NoSuchWindowError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:747:5\nE       assert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nE       assert.open@chrome://remote/content/shared/webdriver/Assert.sys.mjs:147:4\nE       GeckoDriver.prototype.findElement@chrome://remote/content/marionette/driver.sys.mjs:1723:15\nE       despatch@chrome://remote/content/marionette/server.sys.mjs:318:40\nE       execute@chrome://remote/content/marionette/server.sys.mjs:289:16\nE       onPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nE       onPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\nE       _onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\nC:\\Users\\Viktoriya\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "description": "Клик по вопросам FAQ по очереди, открываются ответы на вопросы по очереди", "steps": [{"name": "Клик на вопрос", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: Browsing context has been discarded\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nNoSuchWindowError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:747:5\nassert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nassert.open@chrome://remote/content/shared/webdriver/Assert.sys.mjs:147:4\nGeckoDriver.prototype.findElement@chrome://remote/content/marionette/driver.sys.mjs:1723:15\ndespatch@chrome://remote/content/marionette/server.sys.mjs:318:40\nexecute@chrome://remote/content/marionette/server.sys.mjs:289:16\nonPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nonPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\n", "trace": "  File \"C:\\Users\\Viktoriya\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\cygwin64\\home\\Viktoriya\\Practikum_repos\\Sprint_6\\pages\\important_questions_page.py\", line 30, in click_question_button\n    self.scroll(button)\n    ~~~~~~~~~~~^^^^^^^^\n  File \"C:\\cygwin64\\home\\Viktoriya\\Practikum_repos\\Sprint_6\\pages\\base_pages.py\", line 23, in scroll\n    element = self.driver.find_element(*locator)\n  File \"C:\\Users\\Viktoriya\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Viktoriya\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\Viktoriya\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "button", "value": "('id', 'accordion__heading-6')"}], "start": 1744119178617, "stop": 1744119179287}], "parameters": [{"name": "button", "value": "('id', 'accordion__heading-6')"}, {"name": "answer", "value": "('xpath', '//div[@id = \"accordion__panel-6\"]/p')"}, {"name": "expected_text", "value": "'Да, пока самокат не привезли. Штрафа не будет, объяснительной записки тоже не попросим. Все же свои.'"}], "start": 1744119178617, "stop": 1744119179293, "uuid": "95be8e6e-f253-4111-9222-209938a04a64", "historyId": "37641625af6e320c809fe288871a668e", "testCaseId": "b57baca21c526a6b45d4c835e539978f", "fullName": "tests.test_dropdown_important_questions.TestHomePage#test_faq_list_click_on_questions_check_answer", "labels": [{"name": "feature", "value": "FAQ на главной странице \"Яндекс Самокат\""}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_dropdown_important_questions"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "DESKTOP-9COV576"}, {"name": "thread", "value": "14572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_dropdown_important_questions"}]}